"""
This type stub file was generated by pyright.
"""

from typing import ClassVar
from langchain_core.tools import BaseTool
from pydantic import BaseModel
from .base_tool import MCPServerTool

class ToolSearchInput(BaseModel):
    """Input for searching for tools across MCP servers"""
    query: str = ...
    top_k: int = ...


class SearchToolsTool(MCPServerTool):
    """Tool for searching for tools across all MCP servers using semantic search."""
    name: ClassVar[str] = ...
    description: ClassVar[str] = ...
    args_schema: ClassVar[type[BaseModel]] = ...
    def __init__(self, server_manager) -> None:
        """Initialize with server manager and create a search tool."""
        ...
    


class ToolSearchEngine:
    """
    Provides semantic search capabilities for MCP tools.
    Uses vector similarity for semantic search with optional result caching.
    """
    def __init__(self, server_manager=..., use_caching: bool = ...) -> None:
        """
        Initialize the tool search engine.

        Args:
            server_manager: The ServerManager instance to get tools from
            use_caching: Whether to cache query results
        """
        ...
    
    async def start_indexing(self) -> None:
        """Index the tools from the server manager."""
        ...
    
    async def index_tools(self, server_tools: dict[str, list[BaseTool]]) -> None:
        """
        Index all tools from all servers for search.

        Args:
            server_tools: dictionary mapping server names to their tools
        """
        ...
    
    def search(self, query: str, top_k: int = ...) -> list[tuple[BaseTool, str, float]]:
        """
        Search for tools that match the query using semantic search.

        Args:
            query: The search query
            top_k: Number of top results to return

        Returns:
            list of tuples containing (tool, server_name, score)
        """
        ...
    
    async def search_tools(self, query: str, top_k: int = ..., active_server: str = ...) -> str:
        """
        Search for tools across all MCP servers using semantic search.

        Args:
            query: The search query to find relevant tools
            top_k: Number of top results to return
            active_server: Name of the currently active server (for highlighting)

        Returns:
            String with formatted search results
        """
        ...
    


