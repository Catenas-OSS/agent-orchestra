"""
This type stub file was generated by pyright.
"""

"""
Observability callbacks manager for MCP-use.

This module provides a centralized manager for handling observability callbacks
from various platforms (Langfuse, Laminar, etc.) in a clean and extensible way.
"""
logger = ...
class ObservabilityManager:
    """
    Manages observability callbacks for MCP agents.

    This class provides a centralized way to collect and manage callbacks
    from various observability platforms (Langfuse, Laminar, etc.).
    """
    def __init__(self, custom_callbacks: list | None = ...) -> None:
        """
        Initialize the ObservabilityManager.

        Args:
            custom_callbacks: Optional list of custom callbacks to use instead of defaults.
        """
        ...
    
    def get_callbacks(self) -> list:
        """
        Get the list of callbacks to use.

        Returns:
            List of callbacks - either custom callbacks if provided,
            or all available observability handlers.
        """
        ...
    
    def get_handler_names(self) -> list[str]:
        """
        Get the names of available handlers.

        Returns:
            List of handler names (e.g., ["Langfuse", "Laminar"])
        """
        ...
    
    def has_callbacks(self) -> bool:
        """
        Check if any callbacks are available.

        Returns:
            True if callbacks are available, False otherwise.
        """
        ...
    
    def add_callback(self, callback) -> None:
        """
        Add a callback to the custom callbacks list.

        Args:
            callback: The callback to add.
        """
        ...
    
    def clear_callbacks(self) -> None:
        """Clear all custom callbacks."""
        ...
    
    def __repr__(self) -> str:
        """String representation of the ObservabilityManager."""
        ...
    


_default_manager = ...
def get_default_manager() -> ObservabilityManager:
    """
    Get the default ObservabilityManager instance.

    Returns:
        The default ObservabilityManager instance (singleton).
    """
    ...

def create_manager(custom_callbacks: list | None = ...) -> ObservabilityManager:
    """
    Create a new ObservabilityManager instance.

    Args:
        custom_callbacks: Optional list of custom callbacks.

    Returns:
        A new ObservabilityManager instance.
    """
    ...

