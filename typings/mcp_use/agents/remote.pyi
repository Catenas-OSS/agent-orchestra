"""
This type stub file was generated by pyright.
"""

from typing import TypeVar
from langchain.schema import BaseMessage
from pydantic import BaseModel

"""
Remote agent implementation for executing agents via API.
"""
T = TypeVar("T", bound=BaseModel)
API_CHATS_ENDPOINT = ...
API_CHAT_EXECUTE_ENDPOINT = ...
API_CHAT_DELETE_ENDPOINT = ...
UUID_ERROR_MESSAGE = ...
class RemoteAgent:
    """Agent that executes remotely via API."""
    def __init__(self, agent_id: str, chat_id: str | None = ..., api_key: str | None = ..., base_url: str = ...) -> None:
        """Initialize remote agent.

        Args:
            agent_id: The ID of the remote agent to execute
            chat_id: The ID of the chat session to use. If None, a new chat session will be created.
            api_key: API key for authentication. If None, will check MCP_USE_API_KEY env var
            base_url: Base URL for the remote API
        """
        ...
    
    async def run(self, query: str, max_steps: int | None = ..., external_history: list[BaseMessage] | None = ..., output_schema: type[T] | None = ...) -> str | T:
        """Run a query on the remote agent.

        Args:
            query: The query to execute
            max_steps: Maximum number of steps (default: 10)
            external_history: External history (not supported yet for remote execution)
            output_schema: Optional Pydantic model for structured output

        Returns:
            The result from the remote agent execution (string or structured output)
        """
        ...
    
    async def close(self) -> None:
        """Close the HTTP client."""
        ...
    


