"""
This type stub file was generated by pyright.
"""

from typing import Any
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT
from mcp_use.types.sandbox import SandboxOptions
from .session import MCPSession

"""
Client for managing MCP servers and sessions.

This module provides a high-level client that manages MCP servers, connectors,
and sessions from configuration.
"""
class MCPClient:
    """Client for managing MCP servers and sessions.

    This class provides a unified interface for working with MCP servers,
    handling configuration, connector creation, and session management.
    """
    def __init__(self, config: str | dict[str, Any] | None = ..., allowed_servers: list[str] | None = ..., sandbox: bool = ..., sandbox_options: SandboxOptions | None = ..., sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> None:
        """Initialize a new MCP client.

        Args:
            config: Either a dict containing configuration or a path to a JSON config file.
                   If None, an empty configuration is used.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
        """
        ...
    
    @classmethod
    def from_dict(cls, config: dict[str, Any], sandbox: bool = ..., sandbox_options: SandboxOptions | None = ..., sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> MCPClient:
        """Create a MCPClient from a dictionary.

        Args:
            config: The configuration dictionary.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
            elicitation_callback: Optional elicitation callback function.
        """
        ...
    
    @classmethod
    def from_config_file(cls, filepath: str, sandbox: bool = ..., sandbox_options: SandboxOptions | None = ..., sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> MCPClient:
        """Create a MCPClient from a configuration file.

        Args:
            filepath: The path to the configuration file.
            sandbox: Whether to use sandboxed execution mode for running MCP servers.
            sandbox_options: Optional sandbox configuration options.
            sampling_callback: Optional sampling callback function.
            elicitation_callback: Optional elicitation callback function.
        """
        ...
    
    def add_server(self, name: str, server_config: dict[str, Any]) -> None:
        """Add a server configuration.

        Args:
            name: The name to identify this server.
            server_config: The server configuration.
        """
        ...
    
    def remove_server(self, name: str) -> None:
        """Remove a server configuration.

        Args:
            name: The name of the server to remove.
        """
        ...
    
    def get_server_names(self) -> list[str]:
        """Get the list of configured server names.

        Returns:
            List of server names.
        """
        ...
    
    def save_config(self, filepath: str) -> None:
        """Save the current configuration to a file.

        Args:
            filepath: The path to save the configuration to.
        """
        ...
    
    async def create_session(self, server_name: str, auto_initialize: bool = ...) -> MCPSession:
        """Create a session for the specified server.

        Args:
            server_name: The name of the server to create a session for.
            auto_initialize: Whether to automatically initialize the session.

        Returns:
            The created MCPSession.

        Raises:
            ValueError: If the specified server doesn't exist.
        """
        ...
    
    async def create_all_sessions(self, auto_initialize: bool = ...) -> dict[str, MCPSession]:
        """Create sessions for all configured servers.

        Args:
            auto_initialize: Whether to automatically initialize the sessions.

        Returns:
            Dictionary mapping server names to their MCPSession instances.

        Warns:
            UserWarning: If no servers are configured.
        """
        ...
    
    def get_session(self, server_name: str) -> MCPSession:
        """Get an existing session.

        Args:
            server_name: The name of the server to get the session for.
                        If None, uses the first active session.

        Returns:
            The MCPSession for the specified server.

        Raises:
            ValueError: If no active sessions exist or the specified session doesn't exist.
        """
        ...
    
    def get_all_active_sessions(self) -> dict[str, MCPSession]:
        """Get all active sessions.

        Returns:
            Dictionary mapping server names to their MCPSession instances.
        """
        ...
    
    async def close_session(self, server_name: str) -> None:
        """Close a session.

        Args:
            server_name: The name of the server to close the session for.
                        If None, uses the first active session.

        Raises:
            ValueError: If no active sessions exist or the specified session doesn't exist.
        """
        ...
    
    async def close_all_sessions(self) -> None:
        """Close all active sessions.

        This method ensures all sessions are closed even if some fail.
        """
        ...
    


