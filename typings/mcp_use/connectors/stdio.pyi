"""
This type stub file was generated by pyright.
"""

from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT
from .base import BaseConnector

"""
StdIO connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
through the standard input/output streams.
"""
class StdioConnector(BaseConnector):
    """Connector for MCP implementations using stdio transport.

    This connector uses the stdio transport to communicate with MCP implementations
    that are executed as child processes. It uses a connection manager to handle
    the proper lifecycle management of the stdio client.
    """
    def __init__(self, command: str = ..., args: list[str] | None = ..., env: dict[str, str] | None = ..., errlog=..., sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> None:
        """Initialize a new stdio connector.

        Args:
            command: The command to execute.
            args: Optional command line arguments.
            env: Optional environment variables.
            errlog: Stream to write error output to.
            sampling_callback: Optional callback to sample the client.
            elicitation_callback: Optional callback to elicit the client.
        """
        ...
    
    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        ...
    
    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        ...
    


