"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from datetime import timedelta
from typing import Any
from mcp import Implementation
from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT
from mcp.types import CallToolResult, GetPromptResult, Prompt, ReadResourceResult, Resource, Tool
from pydantic import AnyUrl

"""
Base connector for MCP implementations.

This module provides the base connector interface that all MCP connectors
must implement.
"""
class BaseConnector(ABC):
    """Base class for MCP connectors.

    This class defines the interface that all MCP connectors must implement.
    """
    def __init__(self, sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> None:
        """Initialize base connector with common attributes."""
        ...
    
    @property
    def client_info(self) -> Implementation:
        """Get the client info for the connector."""
        ...
    
    @abstractmethod
    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        ...
    
    @property
    @abstractmethod
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        ...
    
    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        ...
    
    async def initialize(self) -> dict[str, Any]:
        """Initialize the MCP session and return session information."""
        ...
    
    @property
    def tools(self) -> list[Tool]:
        """Get the list of available tools.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_tools()` instead to ensure
            you always get the latest data.
        """
        ...
    
    @property
    def resources(self) -> list[Resource]:
        """Get the list of available resources.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_resources()` instead to ensure
            you always get the latest data.
        """
        ...
    
    @property
    def prompts(self) -> list[Prompt]:
        """Get the list of available prompts.

        .. deprecated::
            This property is deprecated because it may return stale data when the server
            sends list change notifications. Use `await list_prompts()' instead to ensure
            you always get the latest data.
        """
        ...
    
    @property
    def is_connected(self) -> bool:
        """Check if the connector is actually connected and the connection is alive.

        This property checks not only the connected flag but also verifies that
        the underlying connection manager and streams are still active.

        Returns:
            True if the connector is connected and the connection is alive, False otherwise.
        """
        ...
    
    async def call_tool(self, name: str, arguments: dict[str, Any], read_timeout_seconds: timedelta | None = ...) -> CallToolResult:
        """Call an MCP tool with automatic reconnection handling.

        Args:
            name: The name of the tool to call.
            arguments: The arguments to pass to the tool.
            read_timeout_seconds: timeout seconds when calling tool

        Returns:
            The result of the tool call.

        Raises:
            RuntimeError: If the connection is lost and cannot be reestablished.
        """
        ...
    
    async def list_tools(self) -> list[Tool]:
        """List all available tools from the MCP implementation."""
        ...
    
    async def list_resources(self) -> list[Resource]:
        """List all available resources from the MCP implementation."""
        ...
    
    async def read_resource(self, uri: AnyUrl) -> ReadResourceResult:
        """Read a resource by URI."""
        ...
    
    async def list_prompts(self) -> list[Prompt]:
        """List all available prompts from the MCP implementation."""
        ...
    
    async def get_prompt(self, name: str, arguments: dict[str, Any] | None = ...) -> GetPromptResult:
        """Get a prompt by name."""
        ...
    
    async def request(self, method: str, params: dict[str, Any] | None = ...) -> Any:
        """Send a raw request to the MCP implementation."""
        ...
    


