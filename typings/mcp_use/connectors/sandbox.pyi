"""
This type stub file was generated by pyright.
"""

from mcp.client.session import ElicitationFnT, LoggingFnT, MessageHandlerFnT, SamplingFnT
from ..types.sandbox import SandboxOptions
from .base import BaseConnector

"""
Sandbox connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
that are executed inside a sandbox environment (currently using E2B).
"""
class SandboxConnector(BaseConnector):
    """Connector for MCP implementations running in a sandbox environment.

    This connector runs a user-defined stdio command within a sandbox environment,
    currently implemented using E2B, potentially wrapped by a utility like 'supergateway'
    to expose its stdio.
    """
    def __init__(self, command: str, args: list[str], env: dict[str, str] | None = ..., e2b_options: SandboxOptions | None = ..., timeout: float = ..., sse_read_timeout: float = ..., sampling_callback: SamplingFnT | None = ..., elicitation_callback: ElicitationFnT | None = ..., message_handler: MessageHandlerFnT | None = ..., logging_callback: LoggingFnT | None = ...) -> None:
        """Initialize a new sandbox connector.

        Args:
            command: The user's MCP server command to execute in the sandbox.
            args: Command line arguments for the user's MCP server command.
            env: Environment variables for the user's MCP server command.
            e2b_options: Configuration options for the E2B sandbox environment.
                        See SandboxOptions for available options and defaults.
            timeout: Timeout for the sandbox process in seconds.
            sse_read_timeout: Timeout for the SSE connection in seconds.
            sampling_callback: Optional sampling callback.
            elicitation_callback: Optional elicitation callback.
        """
        ...
    
    async def wait_for_server_response(self, base_url: str, timeout: int = ...) -> bool:
        """Wait for the server to respond to HTTP requests.
        Args:
            base_url: The base URL to check for server readiness
            timeout: Maximum time to wait in seconds
        Returns:
            True if server is responding, raises TimeoutError otherwise
        """
        ...
    
    async def connect(self): # -> None:
        """Connect to the sandbox and start the MCP server."""
        ...
    
    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        ...
    
    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        ...
    


