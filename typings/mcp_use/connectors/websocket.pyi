"""
This type stub file was generated by pyright.
"""

from typing import Any
from mcp.types import Tool
from .base import BaseConnector

"""
WebSocket connector for MCP implementations.

This module provides a connector for communicating with MCP implementations
through WebSocket connections.
"""
class WebSocketConnector(BaseConnector):
    """Connector for MCP implementations using WebSocket transport.

    This connector uses WebSockets to communicate with remote MCP implementations,
    using a connection manager to handle the proper lifecycle management.
    """
    def __init__(self, url: str, auth_token: str | None = ..., headers: dict[str, str] | None = ...) -> None:
        """Initialize a new WebSocket connector.

        Args:
            url: The WebSocket URL to connect to.
            auth_token: Optional authentication token.
            headers: Optional additional headers.
        """
        ...
    
    async def connect(self) -> None:
        """Establish a connection to the MCP implementation."""
        ...
    
    async def disconnect(self) -> None:
        """Close the connection to the MCP implementation."""
        ...
    
    async def initialize(self) -> dict[str, Any]:
        """Initialize the MCP session and return session information."""
        ...
    
    async def list_tools(self) -> list[dict[str, Any]]:
        """List all available tools from the MCP implementation."""
        ...
    
    @property
    def tools(self) -> list[Tool]:
        """Get the list of available tools."""
        ...
    
    async def call_tool(self, name: str, arguments: dict[str, Any]) -> Any:
        """Call an MCP tool with the given arguments."""
        ...
    
    async def list_resources(self) -> list[dict[str, Any]]:
        """List all available resources from the MCP implementation."""
        ...
    
    async def read_resource(self, uri: str) -> tuple[bytes, str]:
        """Read a resource by URI."""
        ...
    
    async def request(self, method: str, params: dict[str, Any] | None = ...) -> Any:
        """Send a raw request to the MCP implementation."""
        ...
    
    @property
    def public_identifier(self) -> str:
        """Get the identifier for the connector."""
        ...
    


