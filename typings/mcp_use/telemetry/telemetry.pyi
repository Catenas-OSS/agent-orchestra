"""
This type stub file was generated by pyright.
"""

from collections.abc import Callable
from pathlib import Path
from typing import Any
from mcp_use.telemetry.events import BaseTelemetryEvent
from mcp_use.utils import singleton

logger = ...
def requires_telemetry(func: Callable) -> Callable:
    """Decorator that skips function execution if telemetry is disabled"""
    ...

def get_cache_home() -> Path:
    """Get platform-appropriate cache directory."""
    ...

@singleton
class Telemetry:
    """
    Service for capturing anonymized telemetry data via PostHog and Scarf.
    If the environment variable `MCP_USE_ANONYMIZED_TELEMETRY=false`, telemetry will be disabled.
    """
    USER_ID_PATH = ...
    VERSION_DOWNLOAD_PATH = ...
    PROJECT_API_KEY = ...
    HOST = ...
    SCARF_GATEWAY_URL = ...
    UNKNOWN_USER_ID = ...
    _curr_user_id = ...
    def __init__(self) -> None:
        ...
    
    @property
    def user_id(self) -> str:
        """Get or create a persistent anonymous user ID"""
        ...
    
    @requires_telemetry
    def capture(self, event: BaseTelemetryEvent) -> None:
        """Capture a telemetry event"""
        ...
    
    @requires_telemetry
    def track_package_download(self, properties: dict[str, Any] | None = ...) -> None:
        """Track package download event specifically for Scarf analytics"""
        ...
    
    @requires_telemetry
    def track_agent_execution(self, execution_method: str, query: str, success: bool, model_provider: str, model_name: str, server_count: int, server_identifiers: list[dict[str, str]], total_tools_available: int, tools_available_names: list[str], max_steps_configured: int, memory_enabled: bool, use_server_manager: bool, max_steps_used: int | None, manage_connector: bool, external_history_used: bool, steps_taken: int | None = ..., tools_used_count: int | None = ..., tools_used_names: list[str] | None = ..., response: str | None = ..., execution_time_ms: int | None = ..., error_type: str | None = ..., conversation_history_length: int | None = ...) -> None:
        """Track comprehensive agent execution"""
        ...
    
    @requires_telemetry
    def flush(self) -> None:
        """Flush any queued telemetry events"""
        ...
    
    @requires_telemetry
    def shutdown(self) -> None:
        """Shutdown telemetry clients and flush remaining events"""
        ...
    


