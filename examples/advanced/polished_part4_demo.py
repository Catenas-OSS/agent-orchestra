#!/usr/bin/env python3
"""
Polished Part 4 Demo - Production-Ready Agent Orchestra

This demo showcases all the polish improvements:
‚úÖ Filesystem root path safety
‚úÖ Single MCP client with multi-server support  
‚úÖ Profile-based AgentPool (no duplicate inits)
‚úÖ Server-name routing through MCPExecutor
‚úÖ Final None summary capture
‚úÖ Clean async context management
‚úÖ Proper relative path handling
"""

import asyncio
import json
import os
import sys
import tempfile
from pathlib import Path
from typing import Dict

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

try:
    from langchain_openai import ChatOpenAI
    from agent_orchestra import SidecarMCPClient
    from agent_orchestra.orchestrator.core import Orchestrator
    from agent_orchestra.orchestrator.types import GraphSpec, NodeSpec, RunSpec
    from agent_orchestra.orchestrator.executors_mcp import MCPExecutor
    from agent_orchestra.orchestrator.broker_config import create_development_broker
    from agent_orchestra.orchestrator.agent_pool import AgentPool, create_default_agent_factory
    from agent_orchestra.orchestrator.fs_utils import (
        copy_files_to_root,
        create_multi_server_config,
        fs_args
    )
except ImportError as e:
    print(f"‚ùå Missing dependencies: {e}")
    sys.exit(1)


async def create_test_data(root_dir: Path) -> Dict[str, str]:
    """Create test data files in the filesystem root."""
    
    business_data = {
        "sales_data.json": {
            "department": "sales",
            "revenue": 1500000,
            "growth": 15,
            "key_metrics": ["customer_satisfaction: 4.2", "conversion_rate: 12%", "retention: 89%"]
        },
        "marketing_data.json": {
            "department": "marketing",
            "spend": 250000,
            "roi": 4.2,
            "key_metrics": ["lead_generation: +32%", "brand_awareness: 78%", "campaign_efficiency: 94%"]
        },
        "operations_data.json": {
            "department": "operations",
            "efficiency": 91,
            "cost_savings": 180000,
            "key_metrics": ["process_automation: 67%", "error_rate: 0.8%", "uptime: 99.2%"]
        }
    }
    
    # Copy files to root with relative paths
    return copy_files_to_root(business_data, root_dir)


async def run_polished_demo():
    """Run the polished Part 4 demo."""
    
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå Set OPENAI_API_KEY environment variable")
        return
    
    print("üåü Polished Part 4 Demo - Production-Ready Agent Orchestra")
    print("=" * 65)
    print("‚úÖ All polish improvements implemented")
    print()
    
    with tempfile.TemporaryDirectory() as temp_dir_str:
        root_dir = Path(temp_dir_str)
        
        # Step 1: Create test data with safe relative paths
        print("üìÅ Step 1: Creating test data with safe filesystem paths...")
        test_files = await create_test_data(root_dir)
        print(f"   Created {len(test_files)} files in root: {list(test_files.values())}")
        print()
        
        # Step 2: Check MCP server availability and create fallback
        print("üîå Step 2: Setting up MCP client (checking server availability)...")
        
        # Check if MCP filesystem server is available
        try:
            import subprocess
            result = subprocess.run(
                ["npx", "--yes", "@modelcontextprotocol/server-filesystem", "--version"],
                capture_output=True, 
                text=True,
                timeout=10
            )
            mcp_available = result.returncode == 0
        except Exception:
            mcp_available = False
        
        if not mcp_available:
            print("   ‚ö†Ô∏è  MCP filesystem server not available, using mock setup")
            print("   üí° To run with real MCP: npm install -g @modelcontextprotocol/server-filesystem")
            
            # Use mock client that demonstrates the improvements without actual MCP
            class MockClient:
                def __init__(self, config):
                    self.config = config
                    
                async def close_all_sessions(self):
                    pass
                
                @classmethod 
                def from_dict(cls, config):
                    return cls(config)
            
            mock_config = {"mcpServers": {
                "fs_business": {"root": str(root_dir)},
                "fs_reports": {"root": str(root_dir / "reports")}
            }}
            client = MockClient.from_dict(mock_config)
            print(f"   Mock client configured with {len(mock_config['mcpServers'])} server profiles")
        else:
            # Use real MCP client
            server_configs = {
                "fs_business": {"root": str(root_dir)},
                "fs_reports": {"root": str(root_dir / "reports")},
            }
            
            mcp_config = create_multi_server_config(server_configs)
            client = SidecarMCPClient.from_dict(mcp_config)
            print(f"   Real MCP client configured with {len(mcp_config['mcpServers'])} servers")
        print()
        
        # Step 3: Create profile-based AgentPool with factory
        print("üèä Step 3: Creating profile-based AgentPool...")
        llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.1, max_tokens=300)
        
        if not mcp_available:
            # Create mock agent factory for demonstration
            class MockAgent:
                def __init__(self, llm, client, use_server_manager=True):
                    self.llm = llm
                    self.client = client
                    self.use_server_manager = use_server_manager
                    self.call_count = 0
                    self.creation_id = f"demo_agent_{id(self)}"
                    print(f"      ü§ñ Created demo agent {self.creation_id}")
                
                async def run(self, prompt, **kwargs):
                    self.call_count += 1
                    server_name = kwargs.get('server_name', 'default')
                    
                    # Generate realistic demo responses
                    if "read" in prompt.lower() and "business" in prompt.lower():
                        if "sales_data.json" in prompt:
                            return "Sales: $1.5M revenue, 15% growth, 4.2/5 customer satisfaction"
                        elif "marketing_data.json" in prompt:
                            return "Marketing: $250K spend, 4.2x ROI, +32% lead generation"
                        elif "operations_data.json" in prompt:
                            return "Operations: 91% efficiency, $180K savings, 99.2% uptime"
                    elif "analyze" in prompt.lower():
                        return "Analysis: Top strengths are customer satisfaction, marketing ROI, and operational efficiency. Areas for improvement: conversion rate and error reduction."
                    elif "save" in prompt.lower() and "report" in prompt.lower():
                        return "Executive summary report created successfully with key insights and recommendations."
                    
                    return f"Demo response from {self.creation_id} on {server_name} (call #{self.call_count})"
                
                async def astream(self, prompt, **kwargs):
                    self.call_count += 1
                    server_name = kwargs.get('server_name', 'default')
                    yield {"chunk": 1, "content": f"Processing with {self.creation_id} on {server_name}"}
                    result = await self.run(prompt, **kwargs)
                    self.call_count -= 1  # Don't double count
                    yield {"output": result}
            
            async def mock_factory(spec):
                agent = MockAgent(llm, client, spec.use_server_manager)
                agent.model_key = spec.model_key
                agent.server_name = spec.server_name
                agent.policy_id = spec.policy_id
                return agent
            
            agent_factory = mock_factory
        else:
            agent_factory = create_default_agent_factory(client, llm)
        
        agent_pool = AgentPool(agent_factory, max_agents_per_run=5)
        print("   AgentPool ready with profile-based agent creation")
        print()
        
        # Step 4: Create CallBroker and MCPExecutor
        print("üè≠ Step 4: Setting up CallBroker and MCPExecutor...")
        broker = create_development_broker()
        
        executor = MCPExecutor(
            agent=None,  # No template agent needed with pool
            default_server="fs_business",
            broker=broker,
            agent_pool=agent_pool,
            model_key="openai:gpt-4o-mini"
        )
        orchestrator = Orchestrator(executor)
        print("   Production-ready orchestrator configured")
        print()
        
        try:
            print("üé¨ Step 5: Running multi-server workflow...")
            
            # Create reports directory for second server
            (root_dir / "reports").mkdir(exist_ok=True)
            
            # Workflow with different server routing
            workflow = GraphSpec(
                nodes=[
                    # Read business data from fs_business server
                    NodeSpec(
                        id="read_data",
                        type="foreach", 
                        name="Read Business Data",
                        server_name="fs_business",  # Route to business filesystem
                        inputs={
                            "items": list(test_files.keys()),
                            "instruction": f"Read the JSON file for each business department and summarize the key metrics. Use relative path like 'sales_data.json' not absolute paths."
                        },
                        concurrency=2
                    ),
                    
                    # Analyze data (default server routing)
                    NodeSpec(
                        id="analyze_trends",
                        type="reduce",
                        name="Cross-Department Analysis", 
                        inputs={
                            "from_ids": ["read_data"],
                            "instruction": "Analyze trends across all departments. Identify the top 3 business strengths and 2 areas for improvement based on the metrics."
                        }
                    ),
                    
                    # Save report to fs_reports server  
                    NodeSpec(
                        id="save_report",
                        type="task",
                        name="Save Executive Report",
                        server_name="fs_reports",  # Route to reports filesystem
                        inputs={
                            "from": "analyze_trends",
                            "instruction": "Create an executive summary report and save it as 'executive_summary.txt' in the current directory. Include the analysis findings and recommendations."
                        }
                    )
                ],
                edges=[
                    ("read_data", "analyze_trends"),
                    ("analyze_trends", "save_report")
                ]
            )
            
            run_spec = RunSpec(
                run_id="polished_demo_001",
                goal="Multi-server business analysis with production features"
            )
            
            print(f"üìã Workflow nodes: {len(workflow.nodes)}")
            print(f"üîÄ Multi-server routing: fs_business ‚Üí analysis ‚Üí fs_reports")
            print()
            
            # Execute with all improvements
            events = []
            async for event in orchestrator.run_streaming(workflow, run_spec):
                events.append(event)
                
                if event.type == "NODE_START":
                    server = ""
                    for node in workflow.nodes:
                        if node.id == event.node_id:
                            server = f" (server: {node.server_name or 'default'})"
                            break
                    print(f"üîÑ Starting {event.node_id}{server}")
                    
                elif event.type == "AGENT_CHUNK":
                    if isinstance(event.data, dict) and 'content' in event.data:
                        content = str(event.data['content'])
                        if any(keyword in content.lower() for keyword in ['file', 'data', 'analysis', 'summary']):
                            preview = content[:80] + "..." if len(content) > 80 else content
                            print(f"   üß† Agent: {preview}")
                    
                elif event.type == "NODE_COMPLETE":
                    print(f"‚úÖ Completed {event.node_id}")
                    
                elif event.type == "RUN_COMPLETE":
                    print(f"üéâ Multi-server workflow completed!")
                    
                elif event.type == "ERROR":
                    print(f"‚ùå Error in {event.node_id}: {event.data.get('error', 'Unknown')}")
            
            # Step 6: Show results and statistics
            print(f"\nüìä Execution Results:")
            print(f"   üéØ Events processed: {len(events)}")
            
            # Check if report was created
            report_file = root_dir / "reports" / "executive_summary.txt"
            if report_file.exists():
                print(f"   üìÑ Executive report created: {report_file.name}")
                print(f"   üìè Report size: {len(report_file.read_text())} characters")
            else:
                print(f"   ‚ö†Ô∏è  Report not found (may be in different location)")
            
            # Show broker statistics
            broker_stats = await broker.get_stats()
            for model, stats in broker_stats.items():
                if stats['rpm_used'] > 0:
                    print(f"   üìà {model}: {stats['rpm_used']}/{stats['rpm_limit']} RPM used")
            
            # Show agent pool statistics  
            pool_stats = await agent_pool.get_pool_stats()
            print(f"   üèä Agent profiles: {len(pool_stats['profiles'])}")
            for profile_key, profile_info in pool_stats['profiles'].items():
                server = profile_info['server_name'] or 'default'
                usage = profile_info['usage_count']
                print(f"      {server} server: {usage} uses")
            
            print(f"\nüåü All Polish Improvements Demonstrated:")
            print(f"   ‚úÖ Safe filesystem paths with relative references")
            print(f"   ‚úÖ Single MCP client with multi-server routing")
            print(f"   ‚úÖ Profile-based AgentPool (no duplicate inits)")
            print(f"   ‚úÖ Server-name routing through nodes")
            print(f"   ‚úÖ Proper output capture with fallback to text")
            print(f"   ‚úÖ Clean async context management")
            print(f"   ‚úÖ Production-grade rate limiting and pooling")
            
        except Exception as e:
            print(f"‚ùå Demo failed: {e}")
            import traceback
            traceback.print_exc()
            
        finally:
            # Clean up
            try:
                await client.close_all_sessions()
            except Exception:
                pass
            await broker.shutdown()
            await agent_pool.shutdown()
            print(f"\nüßπ Clean shutdown completed")


async def main():
    """Main entry point."""
    try:
        await run_polished_demo()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Demo interrupted")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    
    print(f"\nüöÄ Polished Part 4 demo complete!")
    print(f"üí° This demonstrates production-ready Agent Orchestra with")
    print(f"   all polish improvements for real-world deployment!")


if __name__ == "__main__":
    asyncio.run(main())